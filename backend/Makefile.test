# Test configuration for Sidechain backend

.PHONY: test test-unit test-integration test-all test-coverage test-bench test-setup

# Test setup
test-setup:
	@echo "🧪 Setting up test environment..."
	@psql -U postgres -c "CREATE DATABASE sidechain_test;" 2>/dev/null || echo "Test database exists"
	@echo "✅ Test database ready"

# Run all tests
test: test-unit

# Unit tests (fast, no external dependencies)
test-unit:
	@echo "⚡ Running fast unit tests..."
	@go test ./internal/auth ./internal/queue ./internal/audio -v -race -timeout 10s
	@echo "✅ Unit tests complete (should be < 1 second)"

# Integration tests (slower, requires FFmpeg/real processing)
test-integration:
	@echo "🧪 Running integration tests..."
	@go test ./tests/integration -tags=integration -v -timeout 60s
	@echo "✅ Integration tests complete"

# All tests including integration
test-all: test-unit test-integration

# Test coverage
test-coverage:
	@echo "📊 Generating test coverage..."
	@go test ./... -coverprofile=coverage.out -covermode=atomic
	@go tool cover -html=coverage.out -o coverage.html
	@echo "✅ Coverage report generated: coverage.html"

# Benchmark tests
test-bench:
	@echo "⚡ Running benchmark tests..."
	@go test ./internal/auth ./internal/queue ./internal/audio -bench=. -benchmem
	@echo "✅ Benchmarks complete"

# Test with verbose output and race detection
test-verbose:
	@echo "🔍 Running verbose tests with race detection..."
	@go test ./... -v -race -timeout 60s

# Quick test (just auth, no FFmpeg)
test-quick:
	@echo "⚡ Running quick tests..."
	@go test ./internal/auth -v -timeout 10s

# Clean test artifacts
test-clean:
	@echo "🧹 Cleaning test artifacts..."
	@rm -f coverage.out coverage.html
	@psql -U postgres -c "DROP DATABASE IF EXISTS sidechain_test;" 2>/dev/null || echo "Test database cleaned"